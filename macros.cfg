#  ___  ___  ___  _____ ______ _____ _
#  |  \/  | / _ \/  __ \| ___ \  _  ( )
#  | .  . |/ /_\ \ /  \/| |_/ / | | |/ ___
#  | |\/| ||  _  | |    |    /| | | | / __|
#  | |  | || | | | \__/\| |\ \\ \_/ / \__ \
#  \_|  |_/\_| |_/\____/\_| \_|\___/  |___/
#

# # # # # # # # # # # # # # # # # # #
# Printer start and stop
# # # # # # # # # # # # # # # # # # #
#

[gcode_macro _CHECK_BED_MESH]
gcode:
  G28 					                      # home all axes
  {% if printer.bed_mesh.profile_name == '' %}
  M118 Mesh does not exist, creating new
  G90                                    # Set all axes to absolute
  BED_MESH_CLEAR
  G1 Z2 F1000 				               # lower
  # G4 P120000
  BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
  M118 Mesh calibration finished
  UPDATE_DELAYED_GCODE ID=_AFTER_BED_CAL DURATION=1
  _NOZZLE_PURGE
  {%else %}
  M118 Mesh loaded
  #BED_MESH_PROFILE LOAD=default
  BED_MESH_PROFILE LOAD={printer.bed_mesh.profile_name}
  _NOZZLE_PURGE
  {% endif %}

[gcode_macro BED_CAL]
gcode:
  G90                                    # Set all axes to absolute
  BED_MESH_CLEAR
  G1 Z2 F1000 				               # lower
  # G4 P120000
  BED_MESH_CALIBRATE
  M118 Mesh calibration finished
  UPDATE_DELAYED_GCODE ID=_AFTER_BED_CAL DURATION=1

[delayed_gcode _AFTER_BED_CAL]
gcode:
  {% if printer.print_stats.state == 'standby' %}
  M118 Printer State is: {printer.print_stats.state}
  M118 Homing
  G28
  {%else %}
  M118 Printer State is: {printer.print_stats.state}
  {% endif %}

[gcode_macro _NOZZLE_PURGE]
gcode:
  {% set pos     = printer.toolhead.position     %}
  M220 S100                                # Reset speed
  G90                                      # Set all axes to absolute
  G92 E0 				                   # zero the extruded length again
  G1 Z80 F1000 				               # lower
  G1 X190 F2000                            # Move to corner if not there already
  G1 E80 F200 				               # purge nozzle quickly
  G92 E0 				                   # zero the extruded length again
  {% if pos.x <= 30 %}
  M118 Starting line purge
  G1 X0 Y100 Z0.2  F2000 			          # pull away filament
  {%else %}
  M118 Starting line purge
  G1 X190 Y100 Z0.2  F2000 			       # pull away filament
  {% endif %}
  G1 Y3 E12 F600			               # move x-carriage 100mm while extruding
  G1 F9000				                   # set movement speed
  G92 E0				                   # zero the extruded length again
  SKEW_PROFILE LOAD=my_skew_profile        # Load skew profile

[gcode_macro _END_PRINT]
gcode:
  SET_SKEW CLEAR=1			# clear skew profile
  SET_PRESSURE_ADVANCE ADVANCE=0.000
  M104 S0 				# extruder heater off
  M140 S0 				# heated bed heater off (if you have it)
  G91 					# relative positioning
  G1 E-1 F300  				# retract the filament a bit before lifting the nozzle, to release some of the pressure
  G1 Z+0.5 E-20 X-20 Y-20 F9000 		# move Z up a bit and retract filament even more
  G28 Z   				# move Z to min endstops, so the head is out of the way
  G28 X Y
  M84 					# steppers off
  G90 					# absolute positioning
  
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  SET_SKEW CLEAR=1			# clear skew profile
  SET_PRESSURE_ADVANCE ADVANCE=0.000
  M104 S0 				# extruder heater off
  M140 S0 				# heated bed heater off (if you have it)
  G28 Z   				# move Z to min endstops, so the head is out of the way
  G28 X Y
  G91 					# relative positioning
  G1 E-20 F300  				# retract the filament a bit before lifting the nozzle, to release some of the pressure
  M84 					# steppers off
  G90 					# absolute positioning
  RESTART


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(10) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(2) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(2) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

# # # # # # # # # # # # # # # # # # #
# Calibrations
# # # # # # # # # # # # # # # # # # #

[gcode_macro ENDSTOP_CAL]
gcode:
  G28
  ENDSTOP_PHASE_CALIBRATE
  G91
  #G1 x100 y-100 z-10 F2000
  G1 z-10 F1500
  G90
  G28
  G91
  #G1 x150 y-190 z-40 F2000
  G1 z-40 F1500
  G90
  G28
  G91
  #G1 x10 y-120 z-120 F2000
  G1 z-120 F1500
  G90
  G28
  G91
  #G1 x190 y-20 z-80 F2000
  G1 z-80 F1500
  G90
  G28
  G91
  #G1 x55 y-100 z-60 F2000
  G1 z-60 F1500
  G90
  G28
  G91
  #G1 x30 y-170 z-50 F2000
  G1 z-50 F1500
  G28
  G90
  ENDSTOP_PHASE_CALIBRATE STEPPER=stepper_z
  SAVE_CONFIG

[gcode_macro Z_CAL]
gcode:
    G28
    G1 X95 Y100
    G90
    Z_ENDSTOP_CALIBRATE
    TESTZ Z=-200

########################################
# PID Tuning Macros
########################################
       
[gcode_macro PID_Extruder_Fan_OFF_220]
gcode:  PID_Start
        PID_CALIBRATE HEATER=extruder TARGET=220  
        PID_End          
         
[gcode_macro PID_Extruder_Fan_OFF_260]
gcode:  PID_Start
        PID_CALIBRATE HEATER=extruder TARGET=260   
        PID_End              
                 
[gcode_macro PID_Extruder_Fan_ON_220]
gcode:  PID_Start
        PID_CALIBRATE HEATER=extruder TARGET=220     
        PID_End                
         
[gcode_macro PID_Extruder_Fan_ON_260]
gcode:  PID_Start                
        PID_CALIBRATE HEATER=extruder TARGET=260    
        PID_End

[gcode_macro PID_Bed_100]
gcode:  PID_Bed_Start                
        PID_CALIBRATE HEATER=heater_bed TARGET=100    
        PID_End 

[gcode_macro PID_Bed_60]
gcode:  PID_Bed_Start                
        PID_CALIBRATE HEATER=heater_bed TARGET=60   
        PID_End 

[gcode_macro PID_Start]
gcode:  G28
        G1 X100 Y100 Z2 F 2000
        M106

[gcode_macro PID_Bed_Start]
gcode:  G28
        M106

[gcode_macro PID_End]
gcode:  RESPOND PREFIX=tgnotify MSG="PID Tuning Complete"
        M107
        G28          
        M84     

# # # # # # # # # # # # # # # # # # #
# Tool change and selection
# # # # # # # # # # # # # # # # # # #

[gcode_macro CHANGE_FILAMENT]
gcode:
  G28
  M117 Heating extruder                    # Message on display
  M109 S220
  M83                                      # Relative moves for extruder
  G92 E0                                   # Set the current filament position to E=0
  M117 Unloading extruder                  # Message on display
  G1 F300 E-50                             # Quickly retract 50 mm to free the splitter
  G28                                      # Home to signal it is finished
  M117 Ready for new filament              # Message on display
  RESPOND PREFIX=tgalarm MSG="Ready for filament"
  G4 P20000                                # Wait 20s to start loading filament
  _LOAD_FILAMENT

[gcode_macro _LOAD_FILAMENT]
gcode:
  M109 S220
  M83                                 # Relative moves for extruder
  G92 E0                              # Set the current filament position to E=0
  M117 Insert filament               # Message on display
  RESPOND PREFIX=tgalarm MSG="Insert filament"
  G1 F150 E70  		              # move Z up a bit and retract filament even more
  G4 P3000
  G1 F300 E-20
  G92 E0                              # Set the current filament position to E=0
  M117 Loading complete               # Message on display
  RESPOND PREFIX=tgalarm MSG="Loading complete"
  G28                                 # Home to signal it finished pushing filament

[gcode_macro REMOVE_PART]
gcode:
    G28
    G91
    G1 Z-100 F1000
    G90
    RESPOND PREFIX=tgalarm MSG="Ready to remove"

########################################
# Printer Varriables
########################################

[gcode_macro _SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
